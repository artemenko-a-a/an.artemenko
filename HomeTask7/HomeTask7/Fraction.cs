using System;namespace HomeTask7{	public struct Fraction : IComparable	{		public int X { get; private set;}		public int Y { get; private set;}		public Fraction(int x, int y)		{			if (y>0) 			{				X = x;				Y = y;			}			else			{				Console.WriteLine ("Знаменатель должен быть больше нуля");				X = 0;				Y = 1;			}		}		public override string ToString ()		{			return $"{X}/{Y}";		}		public int GetMinimalCommonDenominator(Fraction someFraction)		{			// Если знаменатели различны, то ищем наименьший общий делитель			if (Y != someFraction.Y)			{				int n;				// Если первый знаменатель больше второго				if (Y > someFraction.Y)				{					for (n = 1; Y * n % someFraction.Y != 0; n++);					return Y * n;				}				// Иначе если второй знаменатель больше первого				for (n = 1; someFraction.Y * n % Y != 0; n++);				return someFraction.Y * n;			}			// Если знаменатели одинаковые, то вернем первый			return Y;		}		public Fraction[] LeadToCommonDenominator(Fraction someFraction)		{			Fraction[] resultFractions = {new Fraction (X, Y), someFraction};			if (Y != someFraction.Y) 			{				int n = GetMinimalCommonDenominator (someFraction);				int multiplier;				multiplier = n / Y;				resultFractions [0] = new Fraction (X * multiplier, Y * multiplier);				multiplier = n / someFraction.Y;				resultFractions [1] = new Fraction (someFraction.X * multiplier, someFraction.Y * multiplier);			}			return resultFractions;		}		public Fraction Sum(Fraction someFraction)		{			Fraction[] fractionsWithCommonDenominator = LeadToCommonDenominator (someFraction);			return new Fraction (fractionsWithCommonDenominator [0].X + fractionsWithCommonDenominator [1].X,				fractionsWithCommonDenominator [0].Y);		}		public Fraction Sub(Fraction someFraction)		{			Fraction[] fractionsWithCommonDenominator = LeadToCommonDenominator (someFraction);			if (fractionsWithCommonDenominator[0].X >= fractionsWithCommonDenominator[1].X)			{				return new Fraction (fractionsWithCommonDenominator [0].X - fractionsWithCommonDenominator [1].X,					fractionsWithCommonDenominator [0].Y);			}			Console.WriteLine ("Нельзя выполнить вычитание, поскольку первая дробь меньше второй.");			return new Fraction (0, 1);		}		public Fraction Mul(Fraction someFraction)		{			return new Fraction (X * someFraction.X, Y * someFraction.Y);		}		public Fraction Div(Fraction someFraction)		{			return new Fraction (X * someFraction.Y, Y * someFraction.X);		}		public int CompareTo (object obj)		{			Fraction someFraction = (Fraction)obj;			if (Y != someFraction.Y)			{				Fraction[] resultFractions = LeadToCommonDenominator (someFraction);				if (resultFractions[0].X > resultFractions[1].X)				{					return 1;				}				if (resultFractions[0].X < resultFractions[1].X)				{					return -1;				}				return 0;			}			if (X > someFraction.X)			{				return 1;			}			if (X < someFraction.X)			{				return -1;			}			return 0;		}	}}